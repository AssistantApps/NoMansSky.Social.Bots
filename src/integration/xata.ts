// Generated by Xata Codegen 0.21.0. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "CronusSeasonSelections",
    columns: [
      { name: "appId", type: "string" },
      { name: "seasonId", type: "int", notNull: true, defaultValue: "0" },
      {
        name: "selectedDate",
        type: "datetime",
        notNull: true,
        defaultValue: "2023-02-09T19:13:04.513Z",
      },
    ],
  },
  {
    name: "YoutubeVideoNotifications",
    columns: [
      { name: "channelId", type: "string" },
      { name: "videoId", type: "string" },
      { name: "publishDate", type: "datetime" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type CronusSeasonSelections = InferredTypes["CronusSeasonSelections"];
export type CronusSeasonSelectionsRecord = CronusSeasonSelections & XataRecord;

export type YoutubeVideoNotifications =
  InferredTypes["YoutubeVideoNotifications"];
export type YoutubeVideoNotificationsRecord = YoutubeVideoNotifications &
  XataRecord;

export type DatabaseSchema = {
  CronusSeasonSelections: CronusSeasonSelectionsRecord;
  YoutubeVideoNotifications: YoutubeVideoNotificationsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
